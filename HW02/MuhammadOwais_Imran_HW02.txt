-- Name: Muhammad Owais Imran
-- CWID: 20025554
-- HW02 - CS561 - C


-- Query01: For each customer, product and month, count the number of sales transactions that
-- were between the previous and the following month's average sales quantities. For
-- January and December, display <NULL> or 0.

drop table if exists months;
create table if not exists months (
	month integer
);
insert into months values (1);
insert into months values (2);
insert into months values (3);
insert into months values (4);
insert into months values (5);
insert into months values (6);
insert into months values (7);
insert into months values (8);
insert into months values (9);
insert into months values (10);
insert into months values (11);
insert into months values (12);

with before_m as (
	select 
		m1.month, m2.month before_mo
	from
		months m1
	left join
		months m2
	on
		m1.month-1 = m2.month
),
after_m as (
	select 
		m1.month, m2.month after_mo
	from
		months m1
	left join
		months m2
	on
		m1.month+1 = m2.month
),
month_c as (
	select
		c.month, b.before_mo, a.after_mo
	from
		before_m b, after_m a, months c
	where
		b.month=c.month and c.month=a.month
),
curr_avg as (
	select
		l.cust, l.prod, l.month, round(avg(l.quant)) as curr_avg
	from
		sales l
	group by
		l.cust, l.prod, l.month
	order by
		l.cust, l.prod, l.month
),
prev_avg as (
	select
		l.cust, l.prod, l.month, round(avg(l.quant)) as prev_avg
	from
		sales l, month_c r
	where
		l.month=r.before_mo
	group by
		l.cust, l.prod, l.month
	order by
		l.cust, l.prod, l.month
),
next_avg as (
	select
		l.cust, l.prod, l.month, round(avg(l.quant)) as next_avg
	from
		sales l, month_c r
	where
		l.month=r.after_mo
	group by
		l.cust, l.prod, l.month
	order by
		l.cust, l.prod, l.month
),
curr_prev_j as (
	select
		l.cust, l.prod, l.month, r.prev_avg, l.curr_avg
	from
		curr_avg l
	left join
		prev_avg r
	on
		l.cust=r.cust and l.prod=r.prod and l.month=r.month+1
),
curr_prev_next_j as (
	select
		l.cust, l.prod, l.month, l.prev_avg, l.curr_avg, r.next_avg
	from
		curr_prev_j l
	left join
		next_avg r
	on
		l.cust=r.cust and l.prod=r.prod and l.month=r.month-1
),
reference_t as (
	select 
		cust, prod, month, coalesce(prev_avg, 0) as prev_avg, curr_avg, coalesce(next_avg, 0) as next_avg
	from 
		curr_prev_next_j
),
final_output as (
	select
		l.cust as customer, l.prod as product, l.month as month, count(r.quant) as sales_count_between_avgs
	from
		reference_t l, sales r
	where
		r.month=r.month and
		(r.quant between l.prev_avg and l.next_avg) or (r.quant between l.next_avg and l.prev_avg)
	group by
		l.cust, l.prod, l.month
)
select * from final_output


-- Query02: For customer and product, show the average sales before, during and after each
-- month (e.g., for February, show average sales of January and March. For “before”
-- January and “after” December, display <NULL>. The “YEAR” attribute is not
-- considered for this query – for example, both January of 2017 and January of 2018
-- are considered January regardless of the year.


drop table if exists months;
create table if not exists months (
	month integer
);
insert into months values (1);
insert into months values (2);
insert into months values (3);
insert into months values (4);
insert into months values (5);
insert into months values (6);
insert into months values (7);
insert into months values (8);
insert into months values (9);
insert into months values (10);
insert into months values (11);
insert into months values (12);

with before_m as (
	select 
		m1.month, m2.month before_mo
	from
		months m1
	left join
		months m2
	on
		m1.month-1 = m2.month
),
after_m as (
	select 
		m1.month, m2.month after_mo
	from
		months m1
	left join
		months m2
	on
		m1.month+1 = m2.month
),
month_c as (
	select
		c.month, b.before_mo, a.after_mo
	from
		before_m b, after_m a, months c
	where
		b.month=c.month and c.month=a.month
),
curr_avg as (
	select
		l.cust, l.prod, l.month, round(avg(l.quant)) as curr_avg
	from
		sales l
	group by
		l.cust, l.prod, l.month
	order by
		l.cust, l.prod, l.month
),
prev_avg as (
	select
		l.cust, l.prod, l.month, round(avg(l.quant)) as prev_avg
	from
		sales l, month_c r
	where
		l.month=r.before_mo
	group by
		l.cust, l.prod, l.month
	order by
		l.cust, l.prod, l.month
),
next_avg as (
	select
		l.cust, l.prod, l.month, round(avg(l.quant)) as next_avg
	from
		sales l, month_c r
	where
		l.month=r.after_mo
	group by
		l.cust, l.prod, l.month
	order by
		l.cust, l.prod, l.month
),
curr_prev_j as (
	select
		l.cust, l.prod, l.month, r.prev_avg, l.curr_avg
	from
		curr_avg l
	left join
		prev_avg r
	on
		l.cust=r.cust and l.prod=r.prod and l.month=r.month+1
),
curr_prev_next_j as (
	select
		l.cust as customer, l.prod as product, l.month as month, l.prev_avg as before_avg, l.curr_avg as during_avg, r.next_avg as after_avg
	from
		curr_prev_j l
	left join
		next_avg r
	on
		l.cust=r.cust and l.prod=r.prod and l.month=r.month-1
)
select * from curr_prev_next_j


-- Query03: For each customer, product and state combination, compute (1) the product’s average
-- sale of this customer for the state (i.e., the simple AVG for the group-by attributes –
-- this is the easy part), (2) the average sale of the product and the state but for all of the
-- other customers, (3) the customer’s average sale for the given state, but for all of the
-- other products, and (4) the customer’s average sale for the given product, but for all of
-- the other states.

with avgs as (
	select
		cust, prod, state, round(avg(quant), 0) as cust_avg
	from
		sales
	group by
		cust, prod, state
	order by
		cust, prod, state
),
other_cust_avg as (
	select
		l.cust, l.prod, l.state, round(avg(r.quant), 0) as other_cust_avg
	from
		avgs l, sales r
	where 
		l.prod=r.prod and l.cust!=r.cust and l.state=r.state
	group by
		l.cust, l.prod, l.state
),
other_prod_avg as (
	select
		l.cust, l.prod, l.state, round(avg(r.quant), 0) as other_prod_avg
	from
		avgs l, sales r
	where 
		l.prod!=r.prod and l.cust=r.cust and l.state=r.state
	group by
		l.cust, l.prod, l.state
),
other_state_avg as (
	select
		l.cust, l.prod, l.state, round(avg(r.quant), 0) as other_state_avg
	from
		avgs l, sales r
	where
		l.prod=r.prod and l.cust=r.cust and l.state!=r.state
	group by
		l.cust, l.prod, l.state
)

select
	m.cust as customer, m.prod as product, m.state, m.cust_avg as product_avg, c.other_cust_avg, p.other_prod_avg, s.other_state_avg
from
	avgs m, other_cust_avg c, other_prod_avg p, other_state_avg s
where
	m.cust=c.cust and m.prod=c.prod and m.state=c.state and
	m.cust=p.cust and m.prod=p.prod and m.state=p.state and
	m.cust=s.cust and m.prod=s.prod and m.state=s.state and
	c.cust=p.cust and c.prod=p.prod and c.state=p.state and
	c.cust=s.cust and c.prod=s.prod and c.state=s.state and
	p.cust=s.cust and p.prod=s.prod and p.state=s.state


-- Query04: For each customer, find the top 3 highest quantities purchased in New Jersey (NJ).
-- Show the customer’s name, the quantity and product purchased, and the date they
-- purchased it. If there are ties, show all – refer to the sample output below.

with quant_pr_NJ as (
	select
		s.cust, s.prod, s.quant, s.date
	from
		sales s
	where
		s.state='NJ'
),
max_quant_per_cust as (
	SELECT s1.cust,
		MAX(s1.quant) AS first_max,
		MAX(s2.quant) AS second_max,
		MAX(s3.quant) AS third_max
	FROM quant_pr_NJ s1
	LEFT JOIN quant_pr_NJ s2 ON s1.cust = s2.cust AND s1.quant > s2.quant
	LEFT JOIN quant_pr_NJ s3 ON s2.cust = s3.cust AND s2.quant > s3.quant
	GROUP BY s1.cust
),

max_items as (
	select
		l.cust, r.quant, r.prod, r.date
	from
		max_quant_per_cust l, quant_pr_NJ r
	where
		l.cust=r.cust and (l.first_max=r.quant or l.second_max=r.quant or l.third_max=r.quant)
)

select
	cust as customer, quant as quantity, prod as product, date
from 
	max_items
order by cust, quant desc

-- Query05: For each product, find the median sales quantity (assume an odd number of sales for
-- simplicity of presentation). (NOTE – “median” is defined as “denoting or relating to a
-- value or quantity lying at the midpoint of a frequency distribution of observed values or
-- quantities, such that there is an equal probability of falling above or below it.” E.g.,
-- Median value of the list {13, 23, 12, 16, 15, 9, 29} is 15.

with base as (
	select
		distinct prod, quant
	from
		sales
	order by prod, quant
),
pos as (
	select
		b.prod, b.quant, count(s.quant) as pos
	from
		base b
	left join
		sales s
	on 
		b.prod=s.prod and b.quant >= s.quant
	group by
		b.prod, b.quant
),
med_pos_t as (
	select
		s.prod, ceil(count(s.quant)/2) as med_pos
	from
		sales s 
	group by
		s.prod
	
),
med_pos as (
	select
		p.prod, min(p.pos) as med_pos
	from
		med_pos_t m, pos p
	where
		m.prod=p.prod and p.pos>=m.med_pos
	group by
		p.prod
),
t1 as (
	select
		l.prod, l.quant
	from
		pos l, med_pos r
	where
		l.prod=r.prod and l.pos>=r.med_pos
)

select
	t1.prod as product, min(t1.quant) as median_quant
from
	t1
group by
	t1.prod


